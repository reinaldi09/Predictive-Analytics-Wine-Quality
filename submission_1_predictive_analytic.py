# -*- coding: utf-8 -*-
"""Submission 1 - Predictive Analytic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ax3gs0QPGCcuWmUt04Uu03w1KtyiBARk

#Import Seluruh Library yang diperlukan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""#Data Understanding

**Load Dataset**
"""

url = '/content/winequality-red.csv'
wine = pd.read_csv(url)
wine

"""**Informasi Tipe Data dari Dataset**"""

wine.info()

wine.describe()

"""**Data Histogram dari dataset**"""

wine.hist(bins=50, figsize=(15,10))
plt.show()

"""**Hubungan Fungsi Numerik dengan pairplot** """

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(wine, diag_kind = 'kde')

"""**Matrix Correlation dari dataset**"""

#Evaluate Correlation Score
plt.figure(figsize=(10, 8))
correlation_matrix = wine.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""#DATA PREPARATION TRAIN-TEST SPLIT

**Membagi dataset menjadi data train dan data tes**
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
 
X = wine.drop(["quality"],axis =1)
y = wine["quality"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""#ML MODELLING

**Dataframe untuk analisis model**
"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['RandomForest', 'Boosting'])

"""**Random Forest Model**"""

from sklearn.ensemble import RandomForestRegressor
 
# model prediksi
RF = RandomForestRegressor(n_estimators=10, max_depth=32, random_state=8, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""**Boosting Algorithm**"""

from sklearn.ensemble import AdaBoostRegressor
 
# boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55) 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=16)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#Evaluation

**Menghitung MSE masing-masing Model**
"""

mse = pd.DataFrame(columns=['train', 'test'], index=['RF','Boosting'])
 
model_dict = {'RF': RF, 'Boosting': boosting}
 
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""**Hasil Prediksi dari RF dan Boosting**"""

prediksi = X_test.iloc[:4].copy()
pred_dict = {'y_true':y_test[:4]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(3)
 
pd.DataFrame(pred_dict)